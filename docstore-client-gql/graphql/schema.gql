input AddDocumentRequest {
  id: UUID!
  title: String!
  outline: String!
  content: String!
  tags: [String!]!
  genre: String!
}

# Implement the DateTime<Utc> scalar
#
# The input/output is a string in RFC3339 format.
scalar DateTime

type DocumentResponse {
  id: UUID!
  title: String!
  outline: String!
  content: String!
  tags: [String!]!
  genre: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ListDocumentsRequest {
  offset: Int!
  limit: Int!
}

type ListDocumentsResponse {
  documents: [DocumentResponse!]!
  count: Int!
}

type Mutation {
  addDocument(request: AddDocumentRequest!): DocumentResponse!
}

type Query {
  listDocuments(request: ListDocumentsRequest!): ListDocumentsResponse!
}

# A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as Strings
# within GraphQL. UUIDs are used to assign unique identifiers to entities without requiring a central
# allocating authority.
#
# # References
#
# * [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
# * [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
scalar UUID
